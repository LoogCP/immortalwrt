# 更新检查工作流程
# 该工作流用于检查指定 Git 仓库的更新并触发构建。

name: UpdateMy

# 环境变量：
# - REPO_URL: 要检查更新的 Git 仓库的 URL。
# - REPO_BRANCH: 要检查更新的 Git 仓库的分支。
env:
  REPO_URL: https://github.com/openwrt/openwrt
  REPO_BRANCH: openwrt-23.05

# 触发方式：
# - 通过手动触发（workflow_dispatch）。
# - 按照计划，每18小时触发一次（cron: '0 */18 * * *'）。
on:
  workflow_dispatch:
  schedule:
    - cron: 0 */18 * * *

# 工作：
jobs:
  check:
    runs-on: ubuntu-latest

    steps:

    # 获取提交哈希：
    # - 克隆指定的 Git 仓库及分支。
    # - 使用 `git rev-parse HEAD` 获取最新提交的哈希值。
    # - 将提交哈希存储到名为 COMMIT_HASH 的环境变量中。
    - name: Get Commit Hash
      id: getHash
      run: |
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH .
        COMMIT_HASH=$(git rev-parse HEAD)
        echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_ENV

    # 比较提交哈希：
    # - 使用 `actions/cache` 动作缓存提交哈希。
    # - 缓存键基于前一步获取的提交哈希。
    - name: Compare Commit Hash
      id: cacheHash
      uses: actions/cache@v2
      with:
        path: .commitHash
        key: HEAD-${{ env.COMMIT_HASH }}

    # 保存新的提交哈希：
    # - 如果缓存未命中（表示提交哈希发生变化），则将新的提交哈希保存到名为 .commitHash 的文件中。
    - name: Save New Commit Hash
      if: steps.cacheHash.outputs.cache-hit != 'true'
      run: |
        echo $COMMIT_HASH | tee .commitHash

    # 触发构建：
    # - 如果缓存未命中，使用 `peter-evans/repository-dispatch` 触发构建。
    # - 触发的事件类型为 "Source Code Update"。
    - name: Trigger build
      if: steps.cacheHash.outputs.cache-hit != 'true'
      uses: peter-evans/repository-dispatch@v1
      with:
        token: ${{ secrets.ACTIONS_TRIGGER_PAT }}
        event-type: Source Code Update

    # 删除工作流程运行记录：
    # - 使用 `GitRML/delete-workflow-runs` 删除旧的工作流程运行记录。
    # - 保留一天的工作流程运行记录，至少保留一次运行。
    - name: Delete workflow runs
      uses: GitRML/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 1
